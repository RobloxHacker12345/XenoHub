local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/shlexware/Orion/main/source')))()

local Window = OrionLib:MakeWindow({Name = "Xeno Hub V3", HidePremium = false, SaveConfig = true, ConfigFolder = "OrionTest"})

OrionLib:MakeNotification({
    Name = "Xeno",
    Content = "extracrazy3n the scripter",
    Image = "rbxassetid://4483345998",
    Time = 4
})

local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer


local WR_Tab = Window:MakeTab({
    Name = "WR",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

local legitMagsEnabled = false
local maxFootballTeleportDistance = 0

WR_Tab:AddToggle({
    Name = "Legit Mags",
    Default = false,
    Callback = function(Value)
        legitMagsEnabled = Value
        print("Legit Mags Enabled:", Value)
    end
})

WR_Tab:AddSlider({
    Name = "Legit Mags Power",
    Min = 0,
    Max = 25,
    Default = 0,
    Color = Color3.fromRGB(135, 206, 250),
    Increment = 1,
    ValueName = "Distance",
    Callback = function(Value)
        maxFootballTeleportDistance = Value
        print("Legit Mags Distance:", Value)
    end
})

local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local RunService = game:GetService("RunService")

local function TeleportTheFootball()
    if not legitMagsEnabled then return end
    
    local LocalPlayer = Players.LocalPlayer
    local playerRoot = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
    if not playerRoot then return end

    for _, football in ipairs(Workspace:GetChildren()) do
        if football:IsA("BasePart") and football.Name == "Football" then
            local distance = (football.Position - playerRoot.Position).Magnitude

            if distance <= maxFootballTeleportDistance then
                football.CFrame = CFrame.new(playerRoot.Position + Vector3.new(0, 3, 0))  
            end
        end
    end
end

RunService.Heartbeat:Connect(TeleportTheFootball)




local setFootballSizeEnabled = false
local footballSizeValue = 1  


WR_Tab:AddToggle({
    Name = "Legit Mags V2",
    Default = false,
    Callback = function(Value)
        setFootballSizeEnabled = Value
        print("Legit Mags V2 Enabled:", Value)
    end
})




local game = game
local Workspace = game.Workspace
local RunService = game:GetService("RunService")

local footballSizeValue = 1 

local function setFootballSize(Value)
    for _, football in ipairs(Workspace:GetChildren()) do
        if football.Name == "Football" and football:IsA("BasePart") then
            football.Size = Vector3.new(Value, Value, Value)
        end
    end
end

local createHitboxesEnabled = false

local function createHitboxForFootball(football)
    local hitbox = Instance.new("Part")
    hitbox.Name = "FootballHitbox"
    hitbox.Anchored = true
    hitbox.CanCollide = false
    hitbox.Transparency = 0.6
    hitbox.Size = football.Size
    hitbox.Material = "Cardboard"
    hitbox.Position = football.Position
    hitbox.Parent = Workspace

    local connection
    connection = RunService.Heartbeat:Connect(function()
        if not createHitboxesEnabled then
            hitbox:Destroy()
            connection:Disconnect()
            return
        end

        if football.Parent then
            hitbox.Size = football.Size
            hitbox.Position = football.Position
        else
            hitbox:Destroy()
            connection:Disconnect()
        end 
    end)
end

local function createHitboxes()
    for _, football in ipairs(Workspace:GetChildren()) do
        if football:IsA("BasePart") and football.Name == "Football" then
            createHitboxForFootball(football)
        end
    end
end


WR_Tab:AddSlider({
    Name = "Legit Mags V2 Power",
    Min = 0,
    Max = 20,
    Default = 1,
    Color = Color3.fromRGB(135, 206, 250),
    Increment = 1,
    ValueName = "Power",
    Callback = function(Value)
        footballSizeValue = Value * 0.20 + 1
        print("Legit Mags V2 Distance:", footballSizeValue)
        setFootballSize(footballSizeValue)
    end
})

setFootballSize(footballSizeValue)
createHitboxes()

RunService.Heartbeat:Connect(function()
    if setFootballSizeEnabled then 
        setFootballSize(footballSizeValue)
    end
end)


WR_Tab:AddToggle({
    Name = "Legit Mags V2 Mag Hitbox",
    Default = false,
    Callback = function(Value)
        createHitboxesEnabled = Value
        print("Legit Mags V2 Mag Hitbox Enabled:", Value)
        
        if Value then
            
            createHitboxes()
        else
            
            for _, hitbox in ipairs(Workspace:GetChildren()) do
                if hitbox:IsA("BasePart") and hitbox.Name == "FootballHitbox" then
                    hitbox:Destroy()
                end
            end
        end
    end    
})


Workspace.ChildAdded:Connect(function(child)
    if createHitboxesEnabled and child:IsA("BasePart") and child.Name == "Football" then
        createHitboxForFootball(child)

    end
end)




local DB_Tab = Window:MakeTab({
    Name = "DB",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

local blatantMagsEnabled = false
local maxBlatantMagDistance = 0
local CatchRange = 10

DB_Tab:AddToggle({
    Name = "Blatant Mags",
    Default = false,
    Callback = function(Value)
        blatantMagsEnabled = Value
        print("Blatant Mags Enabled:", Value)
    end
})

DB_Tab:AddSlider({
    Name = "Blatant Mags Power",
    Min = 0,
    Max = 50,
    Default = 0,
    Color = Color3.fromRGB(135, 206, 250),
    Increment = 1,
    ValueName = "Power",
    Callback = function(Value)
        maxBlatantMagDistance = Value
        print("Blatant Mags Distance:", Value)
    end
})

local function FootballMag()
    if not blatantMagsEnabled or maxBlatantMagDistance == 0 then return end

    local player = Players.LocalPlayer
    local playerRoot = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
    if not playerRoot then return end

    for _, football in ipairs(Workspace:GetChildren()) do
        if football:IsA("BasePart") and football.Name == "Football" then
            local distance = (football.Position - playerRoot.Position).Magnitude
            if distance <= maxBlatantMagDistance and distance <= CatchRange then
                football.CFrame = CFrame.new(playerRoot.Position)
            end
        end
    end
end

RunService.Heartbeat:Connect(FootballMag)

local blatantMagsV2Enabled = false

DB_Tab:AddToggle({
    Name = "Blatant Mags V2",
    Default = false,
    Callback = function(Value)
        blatantMagsV2Enabled = Value
        print("Blatant Mags V2 Enabled:", Value)
    end
})

DB_Tab:AddSlider({
    Name = "Blatant Mags V2 Power",
    Min = 0,
    Max = 50,
    Default = 0,
    Color = Color3.fromRGB(135, 206, 250),
    Increment = 1,
    ValueName = "Distance",
    Callback = function(Value)
        maxBlatantMagDistance = Value
        print("Blatant Mags V2 Distance:", Value)
    end
})

local function instantTeleport()
    
    if not blatantMagsV2Enabled or maxBlatantMagDistance == 0 then return end

    local plr = Players.LocalPlayer
    local plrs = game:GetService("Players")
    local LA = plr.Character and (plr.Character:FindFirstChild("Left Arm") or plr.Character:FindFirstChild("LeftHand"))
    local RA = plr.Character and (plr.Character:FindFirstChild("Right Arm") or plr.Character:FindFirstChild("RightHand"))
    local l = plr.Character:FindFirstChild("Left Leg")
    local hrp = plr.Character and (plr.Character:FindFirstChild("HumanoidRootPart"))
    if not LA and RA then return end

    for _, football in ipairs(Workspace:GetChildren()) do
        if football:IsA("BasePart") and football.Name == "Football" then
            local distance = (football.Position - LA.Position).Magnitude and (football.Position - RA.Position).Magnitude
            if distance <= maxBlatantMagDistance then
                football.CFrame = CFrame.new(LA.Position)
                football.CFrame = CFrame.new(RA.Position)
                football.Position = CFrame.new(hrp.CFrame)
                football.CFrame = CFrame.new(l.Position)
               end
            end
        end
    end

    local legitMagsEnabled = false
    local maxFootballTeleportDistance = 0
    
    WR_Tab:AddToggle({
        Name = "Legit Mags",
        Default = false,
        Callback = function(Value)
            legitMagsEnabled = Value
            print("Legit Mags Enabled:", Value)
        end
    })
    
    WR_Tab:AddSlider({
        Name = "Legit Mags Power",
        Min = 0,
        Max = 25,
        Default = 0,
        Color = Color3.fromRGB(135, 206, 250),
        Increment = 1,
        ValueName = "Distance",
        Callback = function(Value)
            maxFootballTeleportDistance = Value
            print("Legit Mags Distance:", Value)
        end
    })
    
    local Players = game:GetService("Players")
    local Workspace = game:GetService("Workspace")
    local RunService = game:GetService("RunService")
    
    local function TeleportTheFootball()
        if not legitMagsEnabled then return end
        
        local LocalPlayer = Players.LocalPlayer
        local playerRoot = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
        if not playerRoot then return end
    
        for _, football in ipairs(Workspace:GetChildren()) do
            if football:IsA("BasePart") and football.Name == "Football" then
                local distance = (football.Position - playerRoot.Position).Magnitude
    
                if distance <= maxFootballTeleportDistance then
                    football.CFrame = CFrame.new(playerRoot.Position + Vector3.new(0, 3, 0))  
                end
            end
        end
    end
    
    RunService.Heartbeat:Connect(TeleportTheFootball)
    
    
    
    
    local setFootballSizeEnabled = false
    local footballSizeValue = 1  
    
    
    DB_Tab:AddToggle({
        Name = "Blatant Mags V3",
        Default = false,
        Callback = function(Value)
            setFootballSizeEnabled = Value
            print("Legit Mags V2 Enabled:", Value)
        end
    })
    
    
    
    
    local game = game
    local Workspace = game.Workspace
    local RunService = game:GetService("RunService")
    
    local footballSizeValue = 1 
    
    local function setFootballSize(Value)
        for _, football in ipairs(Workspace:GetChildren()) do
            if football.Name == "Football" and football:IsA("BasePart") then
                football.Size = Vector3.new(Value, Value, Value)
            end
        end
    end
    
    local createHitboxesEnabled = false
    
    local function createHitboxForFootball(football)
        local hitbox = Instance.new("Part")
        hitbox.Name = "FootballHitbox"
        hitbox.Anchored = true
        hitbox.CanCollide = false
        hitbox.Transparency = 0.6
        hitbox.Size = football.Size
        hitbox.Material = "Cardboard"
        hitbox.Position = football.Position
        hitbox.Parent = Workspace
    
        local connection
        connection = RunService.Heartbeat:Connect(function()
            if not createHitboxesEnabled then
                hitbox:Destroy()
                connection:Disconnect()
                return
            end
    
            if football.Parent then
                hitbox.Size = football.Size
                hitbox.Position = football.Position
            else
                hitbox:Destroy()
                connection:Disconnect()
            end 
        end)
    end
    
    local function createHitboxes()
        for _, football in ipairs(Workspace:GetChildren()) do
            if football:IsA("BasePart") and football.Name == "Football" then
                createHitboxForFootball(football)
            end
        end
    end
    
    
    DB_Tab:AddSlider({
        Name = "Blatant Mags V3 Power",
        Min = 0,
        Max = 20,
        Default = 1,
        Color = Color3.fromRGB(135, 206, 250),
        Increment = 1,
        ValueName = "Power",
        Callback = function(Value)
            footballSizeValue = Value * 1.25 + 1
            print("Blatant Mags V3 Distance:", footballSizeValue)
            setFootballSize(footballSizeValue)
        end
    })
    
    setFootballSize(footballSizeValue)
    createHitboxes()
    
    RunService.Heartbeat:Connect(function()
        if setFootballSizeEnabled then 
            setFootballSize(footballSizeValue)
        end
    end)
    
    
    DB_Tab:AddToggle({
        Name = "Blatant Mags V3 Mag Hitbox",
        Default = false,
        Callback = function(Value)
            createHitboxesEnabled = Value
            print("Blatant Mags V3 Mag Hitbox Enabled:", Value)
            
            if Value then
                
                createHitboxes()
            else
                
                for _, hitbox in ipairs(Workspace:GetChildren()) do
                    if hitbox:IsA("BasePart") and hitbox.Name == "FootballHitbox" then
                        hitbox:Destroy()
                    end
                end
            end
        end    
    })
    
    
    Workspace.ChildAdded:Connect(function(child)
        if createHitboxesEnabled and child:IsA("BasePart") and child.Name == "Football" then
            createHitboxForFootball(child)
    
        end
    end)
    




local QB_Tab = Window:MakeTab({
    Name = "QB",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

local QBAimbotEnabled = false

QB_Tab:AddToggle({
    Name = "QB Aimbot",
    Default = false,
    Callback = function(Value)
        QBAimbotEnabled = Value
        print("QB Aimbot Enabled:", Value)
    end
})

local Rusher_Tab = Window:MakeTab({
    Name = "Rusher",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

local walkSpeedEnabled = false

Rusher_Tab:AddToggle({
    Name = "WalkSpeed",
    Default = false,
    Callback = function(Value)
        walkSpeedEnabled = Value
        print("WalkSpeed Enabled:", Value)
    end
})

Rusher_Tab:AddSlider({
    Name = "WalkSpeed",
    Min = 16,
    Max = 50,
    Default = 20,
    Color = Color3.fromRGB(135, 206, 250),
    Increment = 1,
    ValueName = "Speed",
    Callback = function(Value)
        if walkSpeedEnabled then
            while true do
            local player = Players.LocalPlayer
            local character = player.Character
            if character and character:FindFirstChild("Humanoid") then
                character.Humanoid.WalkSpeed = Value
            end
        end
        wait(1)
    end
end   

})

local JP = false

Rusher_Tab:AddToggle({
    Name = "JumpPower",
    Default = false,
    Callback = function(Value)
        JP = Value
        print("JumpPower Enabled:", Value)
    end
})

Rusher_Tab:AddSlider({
    Name = "JumpPower",
    Min = 50,
    Max = 250,
    Default = 50,
    Color = Color3.fromRGB(135, 206, 250),
    Increment = 1,
    ValueName = "Power",
    Callback = function(Value)

        local Players = game:GetService("Players")

        local function AJP()
            local plr = Players.LocalPlayer
            local c = plr.Character
            
            if c and c:FindFirstChild("Humanoid") then
                c.Humanoid.JumpPower = Value
            end
        end
        
        local function onCharacterAdded(character)
            AJP()  
        end
        
        Players.LocalPlayer.CharacterAdded:Connect(onCharacterAdded)  
        
        
        AJP()
        
        
        local function ROR()
            AJP()
        end
        
        spawn(ROR)  

    end 

        
})

Rusher_Tab:AddBind({
    Name = "Ball Carrier Lock",
    Default = Enum.KeyCode.L,
    Hold = false,
    Callback = function()
        print("Ball Carrier Lock Enabled")
    end
})

local teleportRange = 5

local function TeleportForward()
    local player = Players.LocalPlayer
    local character = player.Character
    if not character then return end

    local rootPart = character:FindFirstChild("HumanoidRootPart")
    if not rootPart then return end

    local teleportDirection = rootPart.CFrame.LookVector
    local teleportPosition = rootPart.Position + (teleportDirection * teleportRange)

    local raycastParams = RaycastParams.new()
    raycastParams.FilterDescendantsInstances = {character}
    local raycastResult = Workspace:Raycast(rootPart.Position, teleportDirection * teleportRange, raycastParams)

    if raycastResult then
        teleportPosition = raycastResult.Position
    end

    rootPart.CFrame = CFrame.new(teleportPosition)
end

Rusher_Tab:AddBind({
    Name = "QuickTP",
    Default = Enum.KeyCode.F,
    Hold = false,
    Callback = function()
        TeleportForward()
    end
})

local Extra_Tab = Window:MakeTab({
    Name = "Extra Stuff",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})



local pullVectorDistance = 0
local pullVectorConnection

local function findNearestFootball()
    local nearestFootball = nil
    local minDistance = pullVectorDistance + 1

    for _, football in ipairs(Workspace:GetChildren()) do
        if football:IsA("BasePart") and football.Name == "Football" then
            local distance = (football.Position - Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
            if distance <= pullVectorDistance and distance < minDistance then
                minDistance = distance
                nearestFootball = football
            end
        end
    end

    return nearestFootball
end

local function teleportToFootball()
    if pullVectorDistance == 0 then return end
    local nearestFootball = findNearestFootball()

    if nearestFootball then
        Players.LocalPlayer.Character:SetPrimaryPartCFrame(CFrame.new(nearestFootball.Position))
    end
end



Extra_Tab:AddSlider({
    Name = "Pullvector",
    Min = 0,
    Max = 20,
    Default = 0,
    Color = Color3.fromRGB(135, 206, 250),
    Increment = 1,
    ValueName = "Distance",
    Callback = function(Value)
        pullVectorDistance = Value 
      if pullVectorConnection then
            pullVectorConnection:Disconnect()
        end
        if pullVectorDistance > 0 then
            pullVectorConnection = RunService.Heartbeat:Connect(teleportToFootball)
        end
        print("Pullvector Distance:", Value)
    end
})

local armSize = 1

Extra_Tab:AddSlider({
    Name = "Increased Arm Size",
    Min = 1,
    Max = 10,
    Default = 1,
    Color = Color3.fromRGB(135, 206, 250),
    Increment = 1,
    ValueName = "Size",
    Callback = function(Value)
        armSize = Value
        print("Increased Arm Size:", Value)

        local RunService = game:GetService("RunService")

        local player = Players.LocalPlayer
        local character = player.Character
        if character then
            local leftArm = character:FindFirstChild("Left Arm") or character:FindFirstChild("LeftHand")
            local rightArm = character:FindFirstChild("Right Arm") or character:FindFirstChild("RightHand")
            if leftArm then
                leftArm.Size = Vector3.new(leftArm.Size.X, armSize, armSize)
                leftArm.Massless = true
            end
            if rightArm then
                rightArm.Size = Vector3.new(rightArm.Size.X, armSize, armSize)
                rightArm.Massless = true

                RunService.Heartbeat:Connect(armSize)
            end
        end
    end
})

local armTransparency = 0

Extra_Tab:AddSlider({
    Name = "Arm Transparency",
    Min = 0,
    Max = 1,
    Default = 0,
    Color = Color3.fromRGB(135, 206, 250),
    Increment = 0.1,
    ValueName = "Transparency",
    Callback = function(Value)
        armTransparency = Value
        print("Arm Transparency:", Value)
        
        local RunService = game:GetService("RunService")
        local player = Players.LocalPlayer
        local character = player.Character
        if character then
            local leftArm = character:FindFirstChild("Left Arm") 
            local rightArm = character:FindFirstChild("Right Arm")
            if leftArm then
                for _, part in pairs(leftArm:GetDescendants()) do
                    if part:IsA("BasePart") then
                        part.Transparency = armTransparency
                    end
                end
            end
            if rightArm then
                for _, part in pairs(rightArm:GetDescendants()) do
                    if part:IsA("BasePart") then
                        part.Transparency = armTransparency

                        RunService.Heartbeat:Connect(armTransparency)
                        
                    end
                end
            end
        end
    end
})


local maxDistance = 0


Extra_Tab:AddSlider({
    Name = "AutoBoost",
    Min = 0,
    Max = 20,
    Default = maxDistance,  
    Color = Color3.fromRGB(135, 206, 250),
    Increment = 1,  
    ValueName = "bananas",
    Callback = function(Value)
        maxDistance = Value
        print("New maxDistance set to:", maxDistance)
    end    
})

local plrs = game:GetService("Players")
local plr = plrs.LocalPlayer

local nearesthead = nil

local function moveToHead(nearestHead, maxDist)
    if nearestHead then
        local character = plr.Character
        if character then
            local hrp = character:FindFirstChild("HumanoidRootPart")
            if hrp then
                local distance = (nearestHead.Position - plr.Character.Head.Position).magnitude
                if distance <= maxDist then
                    hrp.CFrame = CFrame.new(nearestHead.Position + Vector3.new(0, 3, 0))  
                else
                    print("Nearest head is too far away.")
                end
            else
                print("HumanoidRootPart not found in character.")
            end
        else
            print("Local player's character not found.")
        end
    else
        print("No nearest head found.")
    end
end

local function findNearestHead()
    local nearestHead = nil
    local shortestDistance = math.huge

    for _, player in pairs(plrs:GetPlayers()) do
        if player ~= plr then
            local c = player.Character
            if c then
                local h = c:FindFirstChild("Head")
                if h then
                    local distance = (h.Position - plr.Character.Head.Position).magnitude
                    if distance < shortestDistance then
                        shortestDistance = distance
                        nearesthead = h
                    end
                end
            end
        end
    end

    return nearesthead
end

game:GetService("RunService").Heartbeat:Connect(function()
    nearesthead = findNearestHead()
    moveToHead(nearesthead, maxDistance)
end)










local player = game.Players.LocalPlayer
local humanoid = player.Character and player.Character:FindFirstChildOfClass("Humanoid")

local sliderEnabled = false 


local function updateHipHeight(value)
    if humanoid and sliderEnabled then
        humanoid.HipHeight = value
    end
end


Extra_Tab:AddToggle({
    Name = "HipHeight",
    Default = false,
    Callback = function(state)
        sliderEnabled = state
        print("HipHeight adjustment enabled: " .. tostring(state))
    end
})


Extra_Tab:AddSlider({
    Name = "HipHeight",
    Min = 0,
    Max = 10.0,
    Default = 1,
    Color = Color3.fromRGB(135, 206, 250),
    Increment = 1,
    ValueName = "Height",
    Callback = function(value)
        updateHipHeight(value)
        print("HipHeight set to: " .. value)
    end    
})






local AJe = false

local function EAJ(c)
    local t = c:FindFirstChild("Torso")
    local h = c:FindFirstChild("Head")

    if t and h then
        t.CanCollide = not AJe
        h.CanCollide = not AJe
    end
end

local function onCharacterAdded(plr)
    plr.CharacterAdded:Connect(function(c)
        EAJ(c)
    end)
end


local function enableAntiJam()
    for _, plr in ipairs(game:GetService("Players"):GetPlayers()) do
        if plr.Character then
            EAJ(plr.Character)
        end
    end
end


for _, plr in ipairs(game:GetService("Players"):GetPlayers()) do
    onCharacterAdded(plr)
end


game:GetService("Players").PlayerAdded:Connect(onCharacterAdded)




Extra_Tab:AddToggle({
    Name = "Anti Jam",
    Default = false,
    Callback = function(Value)
        AJe = Value
        enableAntiJam()
    end
})


enableAntiJam()





local tackleReachDistance = 250

Rusher_Tab:AddSlider({
    Name = "Tackle Reach",
    Min = 1,
    Max = 50,
    Default = 1,
    Color = Color3.fromRGB(135, 206, 250),
    Increment = 1,
    ValueName = "Distance",
    Callback = function(Value)
        tackleReachDistance = Value
        print("Tackle Reach Distance:", Value)
        _G.reach = tackleReachDistance
    end
})

local function resizeHumanoidRootPart(hrp, newSize)
    hrp.Size = Vector3.new(newSize.X, hrp.Size.Y, newSize.Z)
end

RunService.Stepped:Connect(function()
    if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
        local humanoidRootPart = LocalPlayer.Character:FindFirstChild("HumanoidRootPart")

        humanoidRootPart.CustomPhysicalProperties = PhysicalProperties.new(0, 0.3, 0.5, 0.3, 0.5)

        local newSize = Vector3.new(_G.reach, humanoidRootPart.Size.Y, _G.reach)
        if humanoidRootPart.Size == newSize then
            resizeHumanoidRootPart(humanoidRootPart, newSize)
        end
    end
end)

local League_Tab = Window:MakeTab({
    Name = "LFG Main",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

local Section = League_Tab:AddSection({
	Name = "League Mags V2"
})


local hitboxSize = Vector3.new(5, 5, 5)
local hitboxResizeEnabled = false

League_Tab:AddToggle({
    Name = "LFGV2",
    Default = false,
    Callback = function(Value)
        hitboxResizeEnabled = Value
        print("LFGV2 Toggle Enabled:", Value)
    end
})

League_Tab:AddSlider({
    Name = "LFGMagsV2",
    Min = 1,
    Max = 100,
    Default = 1,
    Color = Color3.fromRGB(	135, 206, 250),
    Increment = 1,
    ValueName = "Size",
    Callback = function(Value)
        hitboxSize = Vector3.new(Value, Value, Value)
        if hitboxResizeEnabled then
            resizeHitbox(hitboxSize)
        end
        print("Hitbox Size:", hitboxSize)
    end
})

local function resizeHitbox(newSize)
    local character = LocalPlayer.Character
    if character then
        local hitbox = character:FindFirstChild("Hitbox")
        if hitbox and hitbox:IsA("BasePart") then
            hitbox.Size = newSize
            hitbox.Massless = true
        end
    end
end

local function resizeHitboxLoop()
    while true do
        if hitboxResizeEnabled then
            resizeHitbox(hitboxSize)
        end
        wait(0.1)
    end
end

spawn(resizeHitboxLoop)


local Config_Tab = Window:MakeTab({
	Name = "Configs",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false
})

local Section = Config_Tab:AddSection({
	Name = "Jerrick's Config"
})


Config_Tab:AddToggle({
    Name = "BigDaddyJerrick Config",
    Default = false,
    Callback = function(Value)
        if Value then
            pullVectorDistance = 7.5
            pullVectorConnection = RunService.Heartbeat:Connect(teleportToFootball)
            
            
            local Player = Players.LocalPlayer
            local Character = Player.Character
            if Character and Character:FindFirstChild("Humanoid") then
                Character.Humanoid.JumpPower = 60
            end
        else
            pullVectorDistance = 0
            if pullVectorConnection then
                pullVectorConnection:Disconnect()
                pullVectorConnection = nil
            end

           
            local Player = Players.LocalPlayer
            local Character = Player.Character
            if Character and Character:FindFirstChild("Humanoid") then
                Character.Humanoid.JumpPower = 50
            end
        end
    end

})

Extra_Tab:AddToggle({
    Name = "No Jump Cooldown",
    Default = false,
    Callback = function(Value)

        print("No Jump Cooldown Enabled:", Value)
    end
})

local Section = Config_Tab:AddSection({
	Name = "For D1 Players"
})




Config_Tab:AddToggle({
    Name = "LFGMain Config",
    Default = false,
    Callback = function(Value)
        print("LFG Config Enabled")
    end
})     

local mags = Instance.new("Part")
mags.Name = "Mags"
mags.Anchored = true
mags.CanCollide = false
mags.Transparency = 0.65

local t = game.Workspace:FindFirstChild("Torso")

if t then
    mags.Size = t.Size
    mags.Position = t.Position
    mags.Parent = game.Workspace  

    

    end







Config_Tab:AddToggle({
    Name = "Blatant Config",
    Default = false,
    Callback = function(Value)
    print("Blatant Config Enabled")
    end
})    

local Section = Config_Tab:AddSection({
	Name = "Fat Ahh"
})


Config_Tab:AddToggle({
    Name = "XXL Config",
    Default = false,
    Callback = function(Value)
    print("XXL Config Enabled")
    end
})    

local Mobile_Tab = Window:MakeTab({
	Name = "Mobile Support",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false
})


local maxFootballTeleportDistance = 12
local legitMagEnabled = false

Mobile_Tab:AddToggle({
    Name = "Legit Magnets",
    Default = false,
    Callback = function(Value)
        legitMagEnabled = Value
        print("Legit Magnets Enabled:", Value)
    end
})

local function TeleportTheFootball()
    if not legitMagEnabled then return end
    
    local LocalPlayer = Players.LocalPlayer
    local playerRoot = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
    if not playerRoot then return end

    for _, football in ipairs(Workspace:GetChildren()) do
        if football:IsA("BasePart") and football.Name == "Football" then
            local distance = (football.Position - playerRoot.Position).Magnitude

            if distance <= maxFootballTeleportDistance then
                football.CFrame = CFrame.new(playerRoot.Position + Vector3.new(0, 3, 0))  
            end
        end
    end
end

RunService.Heartbeat:Connect(TeleportTheFootball)

Mobile_Tab:AddToggle({
    Name = "Legit Mags V2",
    Default = false,
    Callback = function(Value)
        legitMagEnabled = Value
        print("Legit Mags V2 Enabled:", Value)
    end
})



local FootballMagEnabled = false
local MaxTeleportDistance = 10
local CatchRange = 10

Mobile_Tab:AddToggle({
    Name = "Blatant Magnets",
    Default = false,
    Callback = function(Value)
        FootballMagEnabled = Value
        print("Blatant Magnets Enabled:", Value)
    end
})

local function FootballMag()
    if not FootballMagEnabled then return end
    
    local LocalPlayer = Players.LocalPlayer
    local catchLeft = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
    if not catchLeft then return end
    
    local targetPositionLeft = catchLeft.Position

    for _, football in ipairs(Workspace:GetChildren()) do
        if football:IsA("BasePart") and football.Name == "Football" then
            local distanceLeft = (football.Position - targetPositionLeft).Magnitude

            if distanceLeft <= MaxTeleportDistance then
                if distanceLeft <= CatchRange then
                    football.CFrame = CFrame.new(targetPositionLeft)
                end
            end
        end
    end
end

RunService.Heartbeat:Connect(FootballMag)

Mobile_Tab:AddToggle({
    Name = "Blatant Mags V2",
    Default = false,
    Callback = function(Value)
        FootballMagEnabled = Value
        print("Blatant Mags V2 Enabled:", Value)
    end
})



local teleportRange = 5

local function TeleportForward()
    local Player = Players.LocalPlayer
    local character = Player.Character
    if not character then return end

    local rootPart = character:FindFirstChild("Head")
    if not rootPart then return end

    local teleportDirection = rootPart.CFrame.LookVector
    local teleportPosition = rootPart.Position + (teleportDirection * teleportRange)

    local raycastParams = RaycastParams.new()
    raycastParams.FilterDescendantsInstances = {Player.Character}
    local raycastResult = Workspace:Raycast(rootPart.Position, teleportDirection * teleportRange, raycastParams)
    if raycastResult then
        teleportPosition = raycastResult.Position
    end

    rootPart.CFrame = CFrame.new(teleportPosition)
end

Mobile_Tab:AddToggle({
    Name = "QuickTP",
    Default = Enum.KeyCode.F,
    Default = false,
    Hold = false,
    Callback = function()
        TeleportForward()
    end
})

Mobile_Tab:AddToggle({
    Name = "Ball Carrier Lock",
    Default = Enum.KeyCode.L,
    Default = false,
    Hold = false,
    Callback = function()
        print("Ball Carrier Lock Enabled")
    end
})



local pullVectorEnabled = false
local pullVectorConnection

local function findNearestFootball()
    local TeleportDistance = 7
    local nearestFootball = nil
    local minDistance = TeleportDistance + 1

    for _, football in ipairs(Workspace:GetChildren()) do
        if football.Name == "Football" and football:IsA("BasePart") then
            local distance = (football.Position - Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
            if distance <= TeleportDistance and distance < minDistance then
                minDistance = distance
                nearestFootball = football
            end
        end
    end

    return nearestFootball
end

local function teleportToFootball()
    if not pullVectorEnabled then return end
    local nearestFootball = findNearestFootball()

    if nearestFootball then
        Players.LocalPlayer.Character:SetPrimaryPartCFrame(CFrame.new(nearestFootball.Position))
    end
end

Mobile_Tab:AddToggle({
    Name = "Pullvector",
    Default = false,
    Callback = function(Value)
        pullVectorEnabled = Value
        if pullVectorEnabled then
            pullVectorConnection = RunService.Heartbeat:Connect(teleportToFootball)
        else
            if pullVectorConnection then
                pullVectorConnection:Disconnect()
                pullVectorConnection = nil
            end
        end
        print("Pullvector Enabled:", Value)
    end
})

local biggerHandsEnabled = false

local function toggleBiggerHands(enabled)
    biggerHandsEnabled = enabled
    print("Bigger Hands Enabled:", enabled)

    local plrs = game:GetService("Players")
    local plr = plrs.LocalPlayer
    local c = plr.Character

    if c then
        local la = c:FindFirstChild("Left Arm")
        local ra = c:FindFirstChild("Right Arm")

        if la then
            la.Size = enabled and Vector3.new(7, 7, 7) or Vector3.new(1, 1, 1)
            la.Massless = enabled
        end

        if ra then
            ra.Size = enabled and Vector3.new(7, 7, 7) or Vector3.new(1, 1, 1)
            ra.Massless = enabled
        end
    end
end

Mobile_Tab:AddToggle({
    Name = "Bigger Hands",
    Default = false,
    Callback = toggleBiggerHands
})



local customMagsEnabled = false

local function getRandomPositionAround(part, minRadius, maxRadius)
    local randomDirection = Vector3.new(math.random() - 0.5, math.random() - 0.5, math.random() - 0.5).Unit
    local randomDistance = minRadius + math.random() * (maxRadius - minRadius)
    return part.Position + randomDirection * randomDistance  
    
end

local function instantTeleport()
    if not customMagsEnabled then return end

    local TeleportDistance = 35
    local MinRadius = 1  
    local MaxRadius = 5  

    local player = Players.LocalPlayer
    local leftArm = player.Character and player.Character:FindFirstChild("Left Arm")
    local rightArm = player.Character and player.Character:FindFirstChild("Right Arm")

    if not leftArm then return end

    for _, football in ipairs(Workspace:GetChildren()) do
        if football.Name == "Football" and football:IsA("BasePart") then
            local distance = (football.Position - leftArm.Position).Magnitude and (football.Position - rightArm.Position).Magnitude
            if distance <= TeleportDistance then
                local randomPosition = getRandomPositionAround(leftArm, MinRadius, MaxRadius) 
                football.CFrame = CFrame.new(randomPosition)
            end
        end
    end
end

RunService.Heartbeat:Connect(instantTeleport)

Mobile_Tab:AddToggle({
    Name = "Custom Mags",
    Default = false,
    Callback = function(Value)
        customMagsEnabled = Value
        print("Custom Mags Enabled:", Value)
    end
})

Mobile_Tab:AddToggle({
    Name = "Tackle Reach",
    Default = false,
    Callback = function(Value)
        print("Tackle Reach Enabled:", Value)
    end
})





Mobile_Tab:AddToggle({
    Name = "Block Reach",
    Default = false,
    Callback = function(Value)
        print("Block Reach Enabled:", Value)
    end
})

local Other_Tab = Window:MakeTab({
	Name = "Other",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false
})

local buttonEnabled = false

Other_Tab:AddButton({
    Name = "Anti Lag",
    Callback = function()
        buttonEnabled = not buttonEnabled
        print("Button Clicked! Current State:", buttonEnabled)
        
        local decalsyeeted = true 
local g = game
local w = g.Workspace
local l = g.Lighting
local t = w.Terrain
t.WaterWaveSize = 0
t.WaterWaveSpeed = 0
t.WaterReflectance = 0
t.WaterTransparency = 0
l.GlobalShadows = false
l.FogEnd = 9e9
l.Brightness = 0
settings().Rendering.QualityLevel = "Level02"
for i, v in pairs(g:GetDescendants()) do
    if v:IsA("Part") or v:IsA("Union") or v:IsA("CornerWedgePart") or v:IsA("TrussPart") then
        v.Material = "Plastic"
        v.Reflectance = 0
    elseif v:IsA("Decal") or v:IsA("Texture") and decalsyeeted then
        v.Transparency = 1
    elseif v:IsA("ParticleEmitter") or v:IsA("Trail") then
        v.Lifetime = NumberRange.new(0)
    elseif v:IsA("Explosion") then
        v.BlastPressure = 1
        v.BlastRadius = 1
    elseif v:IsA("Fire") or v:IsA("SpotLight") or v:IsA("Smoke") then
        v.Enabled = false
    elseif v:IsA("MeshPart") then
        v.Material = "Plastic"
        v.Reflectance = 0
        v.TextureID = 10385902758728957
    end
end
for i, e in pairs(l:GetChildren()) do
    if e:IsA("BlurEffect") or e:IsA("SunRaysEffect") or e:IsA("ColorCorrectionEffect") or e:IsA("BloomEffect") or e:IsA("DepthOfFieldEffect") then
        e.Enabled = false
    end
end

    end


})

local be = false

Other_Tab:AddButton({
    Name = "No Blue Line Barrier",
    Callback = function()
        be = not be
        print("Blue Line Barrier Removed", be)
        
    end
})


local plr = game.Players.LocalPlayer
local Workspace = game:GetService("Workspace")
local l2 = game.Workspace.Line2

l2.Name = "Line2"

l2:Destroy()



local function rj()

    game:GetService("TeleportService"):TeleportToPlaceInstance(game.PlaceId,  game.JobId, Players.LocalPlayer)
    
end

Other_Tab:AddButton({
    Name = "Rejoin",
    Callback = function()
        print("Rejoined The Game")
        rj()
    end
})

Other_Tab:AddButton({
    Name = "No OOB",
    Default = false,
    Callback = function(Value)
     print("click it 3 times if your reading this", Value)
    end
})

    local plr = game.Players.LocalPlayer
    local Workspace = game:GetService("Workspace")
    local outofbounds = game.Workspace.OOB_Line

     if outofbounds then
        outofbounds.Name = "OOB_Line"  
        outofbounds:Destroy()
    end

    local followCarrierEnabled = false

    Rusher_Tab:AddToggle({
        Name = "Follow Football Carrier",
        Default = false,
        Callback = function(Value)
            followCarrierEnabled = Value
            print("Follow Football Carrier Enabled:", Value)
        end
    })
    
    local Players = game:GetService("Players")
    local RunService = game:GetService("RunService")
    local Workspace = game:GetService("Workspace")
    
    local function findFootballCarrier()
        for _, player in pairs(Players:GetPlayers()) do
            if player.Character and player.Character:FindFirstChild("Football") then
                return player
            end
        end
        return nil
    end
    
    local function followFootballCarrier()
        if not followCarrierEnabled then return end
        
        local LocalPlayer = Players.LocalPlayer
        local playerRoot = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
        if not playerRoot then return end
    
        local carrier = findFootballCarrier()
        if carrier and carrier.Character then
            local carrierRoot = carrier.Character:FindFirstChild("HumanoidRootPart")
            if carrierRoot then
                playerRoot.CFrame = playerRoot.CFrame:Lerp(carrierRoot.CFrame, 0.09) 
            end
        end
    end
    
    RunService.Heartbeat:Connect(followFootballCarrier)



    local toggle = false
    local noclip = false
    
    local uis = game:GetService("UserInputService")
    
    local function toggleclip()
        noclip = not noclip
        print("Noclip is now:", noclip)
    end
    
    uis.InputBegan:Connect(function(input, gameProcessedEvent)
        if input.KeyCode == Enum.KeyCode.B and not gameProcessedEvent then
            toggleclip()
        end
    end)
    
    Extra_Tab:AddToggle({
        Name = "Noclip",
        Default = false,
        Callback = function(Value)
            toggle = Value
            toggleclip()
        end    
    })
    
    game:GetService("RunService").RenderStepped:Connect(function()
        if noclip then
            game.Players.LocalPlayer.Character.Humanoid:ChangeState(11)
        end
    end)

local togglev2 = false

QB_Tab:AddToggle({
     Name = "QB Aimbot",
     Default = false,
     Callback = function(Value)
      togglev2 = Value
      
     end
})

local beam = Instance.new("Beam", workspace.Terrain)
                                local Attach0 = Instance.new("Attachment", workspace.Terrain)
                                local Attach1 = Instance.new("Attachment", workspace.Terrain)
								local isLocked = false

								--// Handle Locking Connection //--
								game:GetService("UserInputService").InputBegan:Connect(function(input, gpe)
									if input.KeyCode == Enum.KeyCode.Q and not gpe then
										isLocked = not isLocked
									end
								end)

                                beam.Attachment0 = Attach0
                                beam.Attachment1 = Attach1  
                                beam.Color = ColorSequence.new({
                                         ColorSequenceKeypoint.new(0, Color3.fromRGB(88, 101, 242)),
                                         ColorSequenceKeypoint.new(1, Color3.fromRGB(0,0,0))
                                })
                                local VisPart = Instance.new("Part")
                                VisPart.Size =  VisPart.Size + Vector3.new(1.2, 0, 1.2)
                                VisPart.Name = "TargetVisualPart"
                                VisPart.Anchored = true
                                VisPart.Parent = workspace
                                VisPart.CanCollide = false
                                VisPart.Material = Enum.Material.Neon
                                VisPart.Color = Color3.fromRGB(0, 0, 0)
                                beam.Segments = 5000
								local par = Instance.new("Part")
								par.Parent = workspace
								par.Size = Vector3.new(8, 8, 8)
								par.Name = "LandingPart"
								par.CanCollide = false
								par.Anchored = true
								par.Shape = Enum.PartType.Ball
								par.Color = Color3.fromRGB(255, 165, 0)


								local function grabMousePos()
									return Vector2.new(game:GetService('UserInputService'):GetMouseLocation().X, game:GetService('UserInputService'):GetMouseLocation().Y)
								end

								local function isVisandPos(Pos)
									local camPos, OnScreen = workspace.CurrentCamera:WorldToViewportPoint(Pos)
									if OnScreen then
										return camPos, OnScreen
									end
								end

                                --// QB Aimbot Made By devtrixx. on discord //--

                                --// Variables & Services //--
                                local Players = game:GetService("Players")
                                local Player = Players.LocalPlayer
                                local Char = Player.Character or Player.CharacterAdded:Wait()
                                local HumanoidRootPart = Char:FindFirstChild("HumanoidRootPart")
                                local FF2Grav = 28
                                local mse = Player:GetMouse()
                                local camera = workspace.CurrentCamera
								local ClosestPlr = nil
								local trace = Drawing.new("Line")
								trace.Transparency = 0.70
								trace.Thickness = 4.5
								trace.Color = Color3.fromRGB(88, 101, 242)
								local uis =  game:GetService("UserInputService")
                                -- used this shit for equations and some of my calcs are just me predicting shit
                                -- https://openstax.org/books/university-physics-volume-1/pages/4-3-projectile-motion

                               

                                local QBAIMtab = {
                                    OffSetBased = false
                                }

								  --// Get Closest Player To Our Mouse Function //--

								local Workspace = game:GetService("Workspace")
								local UserInputService = game:GetService("UserInputService")

local function getNearestPlayerToMouse()
    local MousePosition = Vector2.new(mse.X, mse.Y)
    local ClosestPlayer
    local ClosestDistance = math.huge

    local function getScreenPosition(part)
        local ScreenPoint, onScreen = workspace.CurrentCamera:WorldToViewportPoint(part.Position)
        return Vector2.new(ScreenPoint.X, ScreenPoint.Y), onScreen
    end

    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= Players.LocalPlayer and player.Team == Players.LocalPlayer.Team then
            local Character = player.Character
            if Character then
                local HumanoidRootPart = Character:FindFirstChild("HumanoidRootPart")
                if HumanoidRootPart then
                    local ScreenPosition, onScreen = getScreenPosition(HumanoidRootPart)
                    local Distance = (ScreenPosition - MousePosition).Magnitude
                    if Distance < ClosestDistance then
                        ClosestPlayer = player
                        ClosestDistance = Distance
                    end
                end
            end
        end
    end

  
    for _, bot in ipairs(workspace:GetChildren()) do
        if bot.Name == "npcwr" then
            local stationA = bot:FindFirstChild("a")
            local stationB = bot:FindFirstChild("b")
            
            if stationA and stationB then
                local bot1 = stationA:FindFirstChild("bot 1")
                local bot2 = stationB:FindFirstChild("bot 3")
                
                if bot1 then
                    local bot1HumanoidRootPart = bot1:FindFirstChild("HumanoidRootPart")
                    if bot1HumanoidRootPart then
                        local bot1ScreenPosition, onScreen = getScreenPosition(bot1HumanoidRootPart)
                        local bot1Distance = (bot1ScreenPosition - MousePosition).Magnitude
                        if bot1Distance < ClosestDistance then
                            ClosestPlayer = bot1
                            ClosestDistance = bot1Distance
                        end
                    end
                end
                
                if bot2 then
                    local bot2HumanoidRootPart = bot2:FindFirstChild("HumanoidRootPart")
                    if bot2HumanoidRootPart then
                        local bot2ScreenPosition, onScreen = getScreenPosition(bot2HumanoidRootPart)
                        local bot2Distance = (bot2ScreenPosition - MousePosition).Magnitude
                        if bot2Distance < ClosestDistance then
                            ClosestPlayer = bot2
                            ClosestDistance = bot2Distance
                        end
                    end
                end
            end
        end
    end

    return ClosestPlayer
end


								



                                --// Basic moving check function //--
                                local function isMoving(PlayerDaddy)
									if not string.find(PlayerDaddy.Name, "bot 1") or not string.find(PlayerDaddy.Name, "bot 3") then
										if PlayerDaddy.Character:FindFirstChild("Humanoid").MoveDirection.Magnitude > 0 then
											return true
										else
											return false
										end
									end
                                end


                                --// Bezier Curve Formula //--

                                local function beamProjectile(g, v0, x0, t1) --// aw hell yeah ego moose you da goat ! //--
                                    -- calculate the bezier points
                                    local c = 0.5*0.5*0.5;
                                    local p3 = 0.5*g*t1*t1 + v0*t1 + x0;
                                    local p2 = p3 - (g*t1*t1 + v0*t1)/3;
                                    local p1 = (c*g*t1*t1 + 0.5*v0*t1 + x0 - c*(x0+p3))/(3*c) - p2;
                                    
                                    -- the curve sizes
                                    local curve0 = (p1 - x0).magnitude;
                                    local curve1 = (p2 - p3).magnitude;
                                    
                                    -- build the world CFrames for the attachments
                                    local b = (x0 - p3).unit;
                                    local r1 = (p1 - x0).unit;
                                    local u1 = r1:Cross(b).unit;
                                    local r2 = (p2 - p3).unit;
                                    local u2 = r2:Cross(b).unit;
                                    b = u1:Cross(r1).unit;
                                    
                                    local cf1 = CFrame.new(
                                        x0.x, x0.y, x0.z,
                                        r1.x, u1.x, b.x,
                                        r1.y, u1.y, b.y,
                                        r1.z, u1.z, b.z
                                    )
                                    
                                    local cf2 = CFrame.new(
                                        p3.x, p3.y, p3.z,
                                        r2.x, u2.x, b.x,
                                        r2.y, u2.y, b.y,
                                        r2.z, u2.z, b.z
                                    )
                                    
                                    return curve0, -curve1, cf1, cf2;
                                end

								local function getFieldOrientation(throwerPosition, playerPosition)
                                    if playerPosition.Z > 0 then
                                        return 1
                                    else
                                        return -1
                                    end
                                end

								local function clampnum(val, minmimum, maxValue)
									return math.min(math.max(val, minmimum), maxValue)
								end

                                ----------------------------------------
                                --// CALCULATION FUNCTIONS & MATH //--
                                ----------------------------------------
                                local function CalculateRouteofPlayer(Playa)
                                    --[[local MovingCheck = isMoving(getNearestPlayerToMouse())--]]
                                    local RouteType;
									if not string.find(Playa.Name, "bot 1") and not string.find(Playa.Name, "bot 3") then
										local DirectionMoving = Playa.Character:FindFirstChild("Humanoid").MoveDirection
										local DirectionMovingLeftRight = Playa.Character:FindFirstChild("Humanoid").MoveDirection.X
										local DirectionMovingFoward = Playa.Character:FindFirstChild("Humanoid").MoveDirection.Z
										local Distance = (Playa.Character:FindFirstChild("HumanoidRootPart").Position - Player.Character:FindFirstChild("HumanoidRootPart").Position)
										local Direction = Distance.Unit
										local magdist = Distance.magnitude
										local X = Direction * Vector3.new(1, 0, 0)
										local X2 = Direction * Vector3.new(-1, 0, 0)
										local Z = Direction * Vector3.new(0, 0, 1)
										local DirectionDot = DirectionMoving:Dot(Distance)
										local Z2;
										
										if getFieldOrientation(Player.Character:FindFirstChild("HumanoidRootPart"), DirectionMoving) == -1 then
											Z2 = Direction * Vector3.new(0, 0, -1)
										else
											Z2 = Direction * Vector3.new(0, 0, 1)
										end
											
										local XZ = Direction * Vector3.new(1, 0, 1)
										local StreakingRoutesDotProduct = DirectionMoving:Dot(Z2) --// gets the dot product between two vectors //--
										
										if StreakingRoutesDotProduct >= .80 or StreakingRoutesDotProduct <= -0.80 then
											RouteType = "Straight"
										elseif StreakingRoutesDotProduct >= .45 or StreakingRoutesDotProduct <= -0.45 then
											RouteType = "Post"
										elseif StreakingRoutesDotProduct >= .2 or StreakingRoutesDotProduct <= -.2  then
											RouteType = 'Slant'			
										elseif StreakingRoutesDotProduct == 0 then
											RouteType = "Still"
										end
										if DirectionDot < 0 then
											RouteType = "Comeback"
										end
									else
										RouteType = "Straight"
									end
									return RouteType
                                end
								
								
                                local function HorizontalRangeOfProjectile(NearestPlayer)
                                    local NearestPlayerRootPart;
                                    if string.find(NearestPlayer.Name, "bot 1") or string.find(NearestPlayer.Name, "bot 3") then
                                        NearestPlayerRootPart = NearestPlayer:FindFirstChild("Head")
                                    else
                                        NearestPlayerRootPart  = NearestPlayer.Character.Head
                                    end
                                    local PlayerRootPart = Player.Character.HumanoidRootPart
                                    local ProjectileRange = PlayerRootPart.Position - NearestPlayerRootPart.Position
                                    local HorizontalRange = Vector2.new(ProjectileRange.X, ProjectileRange.Z).Magnitude
                                    return HorizontalRange
                                end

								local function HighSpeedLowAngleCalcs(Grav, Speed)
									local RP = HorizontalRangeOfProjectile(getNearestPlayerToMouse())
									local toDeg = math.deg
									local asin = math.asin
									local Eq = 0.535 * asin((RP * Grav) / (Speed ^ 2))
									local Eq2 = toDeg(Eq)
									return Eq
								end
                                
                                
                                local function calculateLaunchAngle(Gravvv, FootballSpeed) -- this took a shit long time to make
                                    local RangeYes = HorizontalRangeOfProjectile(getNearestPlayerToMouse())
                                    --print(RangeYes)
                                    local launchAngle = math.asin(Gravvv * RangeYes / (FootballSpeed ^ 2)) 
                                    return launchAngle
                                end          

                                local function CalculateInitalVelocityYAxis(InitalVelocity, AngleNeeded)
                                    local VelocityY = InitalVelocity * math.sin(AngleNeeded)
                                    return VelocityY
                                end

                                local function calculateInitalVelocityXAxis(InitalVelocity, AngleNeeded)
                                    local VelocityX = InitalVelocity * math.cos(AngleNeeded)
                                    return VelocityX
                                end


                                local function CalculateMaxHeightOfProjectile(Initalvel, angle, gravv)
                                    local InitalVelocityY = CalculateVelocityYAxis(Initalvel, angle)
                                    local Hmax = (InitalVelocityY ^ 2) / (2 * gravv)
                                    return Hmax
                                end

                                local function GetTimeOfFlightProjectile(FootballInitalVelocity, AngleNeeded, Grav)
                                    local TimeOfflightEquation = (2 * FootballInitalVelocity * math.sin(AngleNeeded)) / Grav
                                    return TimeOfflightEquation
                                end

                                local function TimeOfFlight2(FootballS, A,  FootballDownwardGravity)
                                    local VerticalVelocity = CalculateInitalVelocityYAxis(FootballS, A)
                                    local Tlowest = VerticalVelocity / FootballDownwardGravity --// tested this equation to see if its better or not //--
                                    return Tlowest
                                end

                            

                                local function OverallVelocityNeededToReachAPosition(Angie, StartPos, EndPositon, Gravity, Time)
                                    local VelocityNeeded = (EndPositon - StartPos - 0.5 * Gravity * Time * Time) / Time
                                    local Y = (EndPositon - StartPos)
                                    local Xz1 = (Y * Vector3.new(0.25, 0, 0.25)) 
                                    local xz2 = Vector2.new(Y.X, Y.Z).Magnitude
                                    local VelOverTime = xz2 / Time
                                    local notVector = Xz1 / Xz1.Magnitude
                                    local Equationderived = notVector * VelOverTime
                                    local EstimatedVel = Equationderived + Vector3.new(0, VelocityNeeded.Y, 0)
                                    local direction = ((StartPos + EstimatedVel) - StartPos).unit
                                    local pow = EstimatedVel.Y / direction.Y
                                                                --local VelocityNeeded = (EndPositon - StartPos - 0.5 * Gravity * Time * Time) / Time --// ego moose formula but its universal for any projectile //--
                                    return EstimatedVel, direction, clampnum(math.round(pow), 0, 95)
                                end

                                local function CalculateHeightOfTwoPositions(Start, End)
                                    local Dis = (Start - End)
                                    local h = Dis.Y
                                    return h
                                end

		
                                local function getThrowType()
                                    return tostring(ThrowType_2.Text)
                                end
                                
								--// Handle Changing Throw Types //--
                                game:GetService("UserInputService").InputBegan:Connect(function(input, gameProcessedEvent)
                                    local ThrowTypee = getThrowType()
                                    if input.KeyCode == Enum.KeyCode.C and ThrowTypee == "Dime" and not gameProcessedEvent then
                                        ThrowType_2.Text = "Mag"
                                    elseif input.KeyCode == Enum.KeyCode.C and ThrowTypee == "Mag" and not gameProcessedEvent then
                                        ThrowType_2.Text = "Dot"
                                    elseif input.KeyCode == Enum.KeyCode.C and ThrowTypee == "Dot" and not gameProcessedEvent then
                                        ThrowType_2.Text = "Dive"
                                    elseif input.KeyCode == Enum.KeyCode.C and ThrowTypee == "Dive" and not gameProcessedEvent then
                                        ThrowType_2.Text = "Fade"
                                    elseif input.KeyCode == Enum.KeyCode.C and ThrowTypee == "Fade" and not gameProcessedEvent then
                                        ThrowType_2.Text = "Bullet"
									elseif input.KeyCode == Enum.KeyCode.C and ThrowTypee == "Bullet" and not gameProcessedEvent then
										ThrowType_2.Text = "Jump"
									elseif input.KeyCode == Enum.KeyCode.C and ThrowTypee == "Jump" and not gameProcessedEvent then
										ThrowType_2.Text = "Dime"
                                    end
                                end)

								
                                local function CalculateHorizandVeri(TimeOFF,  End, Beginning, GravV)
                                    local Displace = (Beginning - End)
                                    local Xaxis = (Displace.X)
                                    local ZAxis = (Displace.Z)
                                    local YAXis = CalculateHeightOfTwoPositions(Beginning, End)
                                    local XYZVector3 = Vector3.new(Xaxis, YAXis, ZAxis)
                                    local Horizontally = Vector2.new(Xaxis, Zxis).magnitude
                                    local HorizVelNeeded =  Horizontally  / TimeOFF --// Using the Projectile motion Formula Horizontal Velocity: xz/t and yes shlat made this comment//--

                                    local UpWardVel = (YAXis - (0.5 * -GravV * (TimeOFF ^ 2))) --// modified the velocity calculation formula so it just takes into account the y axis  //--
                                    local UpWARDVelneeded = UpWardVel / TimeOFF
                                    
                                    
                                    return UpWardVel, HorizVelNeeded
                                end

                                

                                local function CalculateHeightOfTwoPositions(Start, End)
                                    local Dis = (Start - End)
                                    local h = Dis.Y
                                    return h
                                end

								--// Function to check if the bot is moving //--
								local function isBotMoving(SpeedOFBot)
									if SpeedOFBot == Vector3.new(0,0,0) then
										return false
									else
										return true
									end
								end


								--// Bot Estimated Velocity Function //--
                                local function BotEstimatedVel(Time, Bot)
                                    local Speed = Bot:FindFirstChild("HumanoidRootPart").Velocity
                                    local TOFF = Time
                                    local TypeThroww = getThrowType()
                                    local Botequation;
									local LeadNumtabBot3;
									local LeadNumtabBot1;
									if isBotMoving(Bot:FindFirstChild("HumanoidRootPart").Velocity) then
										 LeadNumtabBot3 = {
											["Dime"] = Vector3.new(-1, 1.25, -6),
											["Mag"] = Vector3.new(-2, 2, -11),
											["Dive"] = Vector3.new(-1.25, 1.5, -9),
											["Dot"] = Vector3.new(-0.09, 0.09, -4),
                                            ["Fade"] = Vector3.new(0, 0, 0),
											["Bullet"] = Vector3.new(-5, -1, -1.25),
											["Jump"] = Vector3.new(-1, 2.25, -5)
										}
										LeadNumtabBot1 = {
											["Dime"] = Vector3.new(1, 1.25, 6),
											["Mag"] = Vector3.new(2, 2, 11),
											["Dive"] = Vector3.new(1.25, 1.5, 9),
											["Dot"] = Vector3.new(0.09, 0.09, 4),
                                            ["Fade"] = Vector3.new(0, 0, 0),
											["Bullet"] = Vector3.new(5, 1, 1.25),
											["Jump"] = Vector3.new(1, 2, 5)
										}
									else
										LeadNumtabBot3 = {
											["Dime"] = Vector3.new(0, 0, 0),
											["Mag"] = Vector3.new(0, 0, 0),
											["Dive"] = Vector3.new(0, 0, 0),
											["Dot"] = Vector3.new(0, 0, 0),
                                            ["Fade"] = Vector3.new(0, 0, 0),
											["Bullet"] = Vector3.new(0, 0, 0),
											["Jump"] = Vector3.new(0, 4, 0)
										}
										LeadNumtabBot1 = {
											["Dime"] = Vector3.new(0, 0, 0),
											["Mag"] = Vector3.new(0, 0, 0),
											["Dive"] = Vector3.new(0, 0, 0),
											["Dot"] = Vector3.new(0, 0, 0),
                                            ["Fade"] = Vector3.new(0, 0, 0),
											["Bullet"] = Vector3.new(0, 0, 0),
											["Jump"] = Vector3.new(0, 5, 0)
										}
									end
                                    local TimeAccount = (Speed * Time)
                                    if Bot.Name == "bot 3"  and isBotMoving(Bot:FindFirstChild("HumanoidRootPart").Velocity) then
                                        Botequation = Bot:FindFirstChild("HumanoidRootPart").Position + (TimeAccount) +  LeadNumtabBot3[TypeThroww]
                                    elseif Bot.Name == "bot 1"  and isBotMoving(Bot:FindFirstChild("HumanoidRootPart").Velocity) then
										Botequation = Bot:FindFirstChild("HumanoidRootPart").Position + (TimeAccount) +  LeadNumtabBot1[TypeThroww]
									elseif Bot.Name == "bot 3" and not isBotMoving(Bot:FindFirstChild("HumanoidRootPart").Velocity) then
										Botequation = Bot:FindFirstChild("HumanoidRootPart").Position + LeadNumtabBot3[TypeThroww]
									elseif Bot.Name == "bot 1" and not isBotMoving(Bot:FindFirstChild("HumanoidRootPart").Velocity) then
										Botequation = Bot:FindFirstChild("HumanoidRootPart").Position
									end
                                        
                                    return Botequation
                                end

								--// old calculated throw direction function //--
                                local function toThrowDirection(HVelocity, VVelocity, Time, Gravity, Beginning, End)
                                    local XThroughZVelocity = HVelocity
                                    local UPVel = VVelocity
                                    local PositionFromTwoPoints = (Beginning - End)
                                    local UpWardVelocityOffset = Vector3.new(0, UPVel, 0)
                                    local FowardAndBackward = Vector3.new(0, 0, PositionFromTwoPoints.Z)
                                    
                                    local toSide = Vector3.new(PositionFromTwoPoints.X, 0, 0)
                                    
                                    local BothAxis = Vector3.new(1, 0, 1)
                                    
                                    local DirectionMag = (PositionFromTwoPoints * BothAxis).magnitude
                                    local DirectionUnit = (PositionFromTwoPoints * BothAxis).Unit
                                    local DirectionNormalVec3 = (PositionFromTwoPoints * BothAxis)

                                    local DivisonToCalcAverage = (DirectionNormalVec3 / DirectionMag) 
                                    local HorizontalVelocityAccountedfor = DivisonToCalcAverage * XThroughZVelocity
                                    local VelocityOffsetAccountedFor = HorizontalVelocityAccountedfor + UpWardVelocityOffset

                                    return VelocityOffsetAccountedFor
                                end

                         
                                --/-//-/-/-/-/-/-/-//////////////////-/-//-/-/-/-/-/-/-/-


                                ----------------------------------------------
                                        --// Prediciton Functions //--
                                ----------------------------------------------
                                local function getOffsetPredictionBasedOnRouteandThrowType(Route, ThrowType)
                                    if QBAIMtab.OffSetBased then
                                    local closestPlrtomouse = getNearestPlayerToMouse()
                                    local CalculatedRoute = CalculateRouteofPlayer(closestPlrtomouse)
                                    
                                    local LeftandRightXOf;
                                    local LeftandRightZOf;

                                    local FowardXOf;
                                    local FowardZOf;

                                    local BackwardXOf;
                                    local BackwardZOf
                                    if Route == 'LeftRight' and ThrowType == "Dime" then
                                        LeftandRightXOf = 0.28
                                        LeftandRightZOf = 0.25
                                    elseif Route == "Foward" or "Backward" and ThrowType == "Dime" then
                                        FowardXOf = 0.27
                                        FowardZOf = 0.35
                                        BackwardXOf = 0.015
                                        BackwardZOf = 0.2
                                    elseif Route == 'LeftRight' and ThrowType == "Dive" then
                                        LeftandRightXOf = 0.45
                                        LeftandRightZOf = 0.35
                                        end
                                    end
                                end

								----------------------------------------------------
										--// Highlight Functions //--
								----------------------------------------------------
				
									local Highlight = Instance.new("Highlight")
									Highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
								
									
								 	local function updateHighlight(nearest)
									if nearest and nearest.Name ~= "bot 1" or nearest.Name ~= "bot 3"  then
										if nearest.Character and nearest.Character:FindFirstChild("HumanoidRootPart") then
											Highlight.Adornee = nearest.Character
											Highlight.Parent = nearest.Character.HumanoidRootPart
										else
											Highlight.Parent = nil  
										end
								

									elseif nearest.Name == "bot 1" or nearest.Name == "bot 3"  then
										Highlight.Parent = nearest
										Highlight.Adornee = nearest:FindFirstChild("HumanoidRootPart")
									elseif not nearest then
										Highlight.Parent = nil  
										
									end
								end
----------------------------------------------------/-/-/-/-//-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/////////////////-/-/-/-/-/-/-							
								
							
								----------------------------------------------------
										--// Interceptable Functions //--
								----------------------------------------------------
								
								
								local function getPeopleGuardingClosestToMouse(WR)
									local ClosestCB, MaxDistance = nil, 9e9
									if game.PlaceId == 8206123457 then
										for index, CB in next, Players:GetPlayers() do
											if CB ~= WR and CB ~= Player then
												if CB:IsA("Player") and CB.Character then
													if not string.find(WR.Name, "bot 1") or not string.find(WR.Name, "bot 1") then
														local dist = (CB.Character:FindFirstChild("HumanoidRootPart").Position - WR.Character:FindFirstChild("HumanoidRootPart").Position).magnitude
														if dist < MaxDistance then
															ClosestCB = CB
															MaxDistance = dist
														end
													end
												end
											end
										end
									else
										for index, CB in next, Players:GetPlayers() do
											if CB ~= WR and CB ~= Player and CB.Team ~= Player.Team then
												if CB:IsA("Player") and CB.Character then
													local dist = (CB.Character:FindFirstChild("HumanoidRootPart").Position - WR.Character:FindFirstChild("HumanoidRootPart").Position).magnitude
													if dist < MaxDistance then
														ClosestCB = CB
														MaxDistance = dist
													end
												end
											end
										end
									end
									return ClosestCB
								end

								local function Interceptable(Corner, LandingPos, t)
									if Corner and Corner.Character then
										local Dist = (Corner.Character:FindFirstChild("HumanoidRootPart").Position - LandingPos).magnitude
										
										local WalksSpeedOFPlr = Corner.Character:FindFirstChild("Humanoid").WalkSpeed
										local DiveingNumberAccountedFor = 0.31
										local eqq = (Dist / WalksSpeedOFPlr) - DiveingNumberAccountedFor --// minus some time because people can dive //--
										
										local Percent = (Dist * 0.70)
										local HighestThreshHold = (Dist - Percent)
										if eqq <= t then
											return true
										elseif Dist == 0 then
											return true
										else
											return false
										end
									end
								end


								local function getClosestCBtoBot(BotHere)
									local CbBot;
									for index, CBBot in next, workspace:GetChildren() do
										if game.PlaceId == 8206123457 and CBBot.Name == "npcwr" then
										local A = CBBot["a"]
										local B = CBBot["b"]
										local ACBBot = A["bot 2"]
										local BCBBot = B["bot 4"]
											if BotHere.Name == "bot 1" then
												CbBot = ACBBot
											elseif BotHere.Name == "bot 3" then
												CbBot = BCBBot
											end
										end  
									end
									return CbBot
								end

								local function botInterceptable(Corna, LandingEstimatedPos, t)
									if Corna:FindFirstChild("HumanoidRootPart") then
										local BotDist = (Corna:FindFirstChild("HumanoidRootPart").Position - LandingEstimatedPos).magnitude
										local WalksSpeedOFPlr = 20
										local DiveingNumberAccountedFor = 0.31
										local eqq = (BotDist / WalksSpeedOFPlr) - DiveingNumberAccountedFor --// minus some time because people can dive //--
										
										local Percenty = (BotDist * 0.70)
										local Highest = (BotDist - Percenty)
										if eqq <= t then
											return true
										elseif BotDist == 0 then
											return true
										else
											return false
										end
									end
								end


----------------------------------------------------------------------------------------------------------------------/////-/-/-/-/-/-/-/-/---------------------/-/-/-/-/-/-/-//-/-
								
								-------------------------------
								-- // Catchable Functions // --
								-------------------------------

								
								local function CatchAble(wr, LandingPos, TimeOfProjectileFlight)
									if wr and wr.Character then
										local Dist = (wr.Character:FindFirstChild("HumanoidRootPart").Position - LandingPos).magnitude
										local WalksSpeedOFPlr = wr.Character:FindFirstChild("Humanoid").WalkSpeed
										local DiveingNumberAccountedFor = 0.31
										local eqq = (Dist / WalksSpeedOFPlr) - DiveingNumberAccountedFor --// minus some time because people can dive //--
										local Percent = (Dist * 0.70)
										local HighestThreshHold = (Dist - Percent)
										local WalkSpeed = 16
										if eqq <= TimeOfProjectileFlight then
											return true
										elseif Dist == 0 then
											return true
										else
											return false
										end
									end
								end
								
								local function botCatchAble(Wr, LandingEstimatedPoss)
									if Wr:FindFirstChild("HumanoidRootPart") then
										local BotDist = (Wr:FindFirstChild("HumanoidRootPart").Position - LandingEstimatedPoss).magnitude
										local Percenty = (BotDist * 0.70)
										local Highest = (BotDist - Percenty)
										if BotDist <= Highest then
											return true
										elseif BotDist == 0 then
											return true
										else
											return false
										end
									end
								end










								--// Round Number to Hundreths function //--
                                local function RoundNumToHundredths(number)
                                    return math.floor(number * 100 + 0.5) / 100
                                end

								local function clampnum(val, minmimum, maxValue)
									return math.min(math.max(val, minmimum), maxValue)
								end

                                local function GetTargetPositionForWR(Time, WideReceiver)
                                    if WideReceiver.Character and WideReceiver.Character:FindFirstChild("HumanoidRootPart") then
                                        local WRMovingVelocity = WideReceiver.Character:FindFirstChild("Humanoid").MoveDirection
                                        local TypeThrow = getThrowType()
                                        
                                        local LeadNumtab;

    
                                        local fieldOrientation = getFieldOrientation(Player.Character:FindFirstChild("HumanoidRootPart").Position, WideReceiver.Character:FindFirstChild("Humanoid").MoveDirection)
										if isMoving(WideReceiver) then
											if fieldOrientation == 1 then
												LeadNumtab = {
													["Dime"] = Vector3.new(1, 1.65, 9),   
													["Mag"] = Vector3.new(2, 2, 11),
													["Dive"] = Vector3.new(1.25, 1.86, 9.5),
													["Dot"] = Vector3.new(1, 1.2, 7),
                                                    ["Fade"] = Vector3.new(0, 0, 0),
													["Bullet"] = Vector3.new(5, 1, 1),
													["Jump"] = Vector3.new(1, 2.25, 7.5)
												}
											elseif fieldOrientation == -1 then
												LeadNumtab = {
													["Dime"] = Vector3.new(1, 1.65, -9),   
													["Mag"] = Vector3.new(2, 2, -11),
													["Dive"] = Vector3.new(1.25, 1.86, -9.5),
													["Dot"] = Vector3.new(1, 1.2, -7),
                                                    ["Fade"] = Vector3.new(0, 0, 0),
													["Bullet"] = Vector3.new(-5, 1, -1),
													["Jump"] = Vector3.new(1, 2.25, -7.5)
												}
											end
										else
											LeadNumtab = {
												["Dime"] = Vector3.new(0, 0, 0),   
												["Mag"] = Vector3.new(0, 0, 0),
												["Dive"] = Vector3.new(0, 0, 0),
												["Dot"] = Vector3.new(0, 0, 0),
                                                ["Fade"] = Vector3.new(0, 0, 0),
												["Bullet"] = Vector3.new(0, 0, 0),
												["Jump"] = Vector3.new(0, 5, 0)
											}
										end
                                        local ThrowTypeAccountability;

                                        if TypeThrow == "Dot" then
                                            ThrowTypeAccountability = (WRMovingVelocity * 17.5 * Time)
										elseif TypeThrow == "Bullet" then
                                            local XZAXIS = Vector3.new(WRMovingVelocity.X, 0, WRMovingVelocity.Z)
											ThrowTypeAccountability = (XZAXIS * 20.02 * Time)	
										elseif TypeThrow == "Jump" then
											ThrowTypeAccountability = (WRMovingVelocity * 18.5 * Time)					
										elseif TypeThrow == "Dime" then
											ThrowTypeAccountability = (WRMovingVelocity * 18.9 * Time)		
										elseif TypeThrow == "Dive" then
											ThrowTypeAccountability = (WRMovingVelocity * 19.3 * Time)	
										elseif TypeThrow == "Mag" then
											ThrowTypeAccountability = (WRMovingVelocity * 19.7 * Time)	
                                        end
                                
                                        local Equation
										if isMoving(WideReceiver) then
                                            if TypeThrow == "Fade" then
                                                Equation = WideReceiver.Character.Head.Position + LeadNumtab[TypeThrow]
                                            elseif TypeThrow == "Bullet" then
												Equation = WideReceiver.Character.Head.Position + (ThrowTypeAccountability) + LeadNumtab[TypeThrow]
											else
											    Equation = WideReceiver.Character.Head.Position + (ThrowTypeAccountability) + LeadNumtab[TypeThrow]
                                            end
										elseif not isMoving(WideReceiver) and TypeThrow == "Jump" then --// always make it a jump throw even if not moving //--
                                            Equation = WideReceiver.Character.Head.Position + (ThrowTypeAccountability) + Vector3.new(0, 6, 0)
                                        else
											Equation = WideReceiver.Character.Head.Position 
										end
        
                                        return Equation
                                    else
                                        warn("Wide Receiver or HumanoidRootPart not found")
                                        return Vector3.new(0, 0, 0)
                                    end
                                end


                                local Data = {
                                    Direction = Vector3.new(0, 0, 0),
									NormalPower = 55,		
									BulletModeAngle = 5,
									FadeModeAngle = 55,
									LowestPower = 40,
									MaxPower = 95,
                                    Angle = 45,
                                    MaxAngle = 55,
                                    lowestAngle = 10
                                }

								
								--// Function to predict the projectile landing position //--
								local function predicitLand(Velocity, Gravity, num, start, powa, timeoflight)
									local Vel = powa * Velocity
									local position = start + Vel * timeoflight + 0.5 * Gravity * timeoflight * timeoflight
  									return position
								end

								--// Adjust Angle Manually Connection//--
                                game:GetService("UserInputService").InputBegan:Connect(function(input, typeing)
                                    if not AutoAngie and not typeing then
										local TT = getThrowType()
										if TT == "Bullet" then
											if input.KeyCode == Enum.KeyCode.R and Data.BulletModeAngle < 20 then
												Data.BulletModeAngle = Data.BulletModeAngle + 5
											elseif input.KeyCode == Enum.KeyCode.F and Data.BulletModeAngle > 5 then
												Data.BulletModeAngle = Data.BulletModeAngle - 5
											elseif input.KeyCode == Enum.KeyCode.R and Data.BulletModeAngle == 20 then                                        
												warn("Cannot Up Angle Any more, Max Angle is 20")
												Data.BulletModeAngle = Data.BulletModeAngle + 0
											elseif input.KeyCode == Enum.KeyCode.F and Data.BulletModeAngle == 5 then
												warn("Cannot Lower Angle Any more, Lowest Angle is 5")
												Data.BulletModeAngle = Data.BulletModeAngle - 0
											end
										elseif TT == "Fade" then
											if input.KeyCode == Enum.KeyCode.R and Data.FadeModeAngle < 75 then
												Data.FadeModeAngle = Data.FadeModeAngle + 5
											elseif input.KeyCode == Enum.KeyCode.F and Data.FadeModeAngle > 55 then
												Data.FadeModeAngle = Data.FadeModeAngle - 5
											elseif input.KeyCode == Enum.KeyCode.R and Data.FadeModeAngle == 75 then                                        
												warn("Cannot Up Angle Any more, Max Angle is 75")
												Data.FadeModeAngle = Data.FadeModeAngle + 0
											elseif input.KeyCode == Enum.KeyCode.F and Data.FadeModeAngle == 55 then
												warn("Cannot Lower Angle Any more, Lowest Angle is 55")
												Data.FadeModeAngle = Data.FadeModeAngle - 0
											end
										else
											if input.KeyCode == Enum.KeyCode.R and Data.Angle < 55 then
												Data.Angle = Data.Angle + 5
											elseif input.KeyCode == Enum.KeyCode.F and Data.Angle > 10 then
												Data.Angle = Data.Angle - 5
											elseif input.KeyCode == Enum.KeyCode.R and Data.Angle == 55 then                                        
												warn("Cannot Up Angle Any more, Max Angle is 55")
												Data.Angle = Data.Angle + 0
											elseif input.KeyCode == Enum.KeyCode.F and Data.Angle == 10 then
												warn("Cannot Lower Angle Any more, Lowest Angle is 10")
												Data.Angle = Data.Angle - 0
											end
										end
                                    end
                                end)

								--// Adjust Power Manually Connection//--
								game:GetService("UserInputService").InputBegan:Connect(function(input, typein)
									if not AutoPowa and not typein then
										if input.KeyCode == Enum.KeyCode.Z and Data.NormalPower < Data.MaxPower then
											Data.NormalPower = Data.NormalPower + 5
										elseif input.KeyCode == Enum.KeyCode.X and Data.NormalPower > Data.LowestPower then
											Data.NormalPower = Data.NormalPower - 5
										elseif input.KeyCode == Enum.KeyCode.Z and Data.NormalPower == Data.MaxPower then
											Data.NormalPower = Data.NormalPower + 0
											warn("Max Power, Cannot Adjust Any Higher")	
										elseif input.KeyCode == Enum.KeyCode.X and Data.NormalPower == Data.LowestPower then
											Data.NormalPower = Data.NormalPower - 0
											warn("Lowest Possible Power, Cannot Adjust Any Lower")										
										end
									end
								end)
                                -------/------/------/---/-------/----------/-----/------/-------------/-----------/--------------/----------/---------
								local function isVector3Valid(vec3)
									return not (vec3.X ~= vec3.X or vec3.Y ~= vec3.Y or vec3.Z ~= vec3.Z)
								end
								
								local ThrowingTab = {
									Direction = Vector3.new(0, 0, 0)
								}
                                game:GetService("UserInputService").InputBegan:Connect(function(input, gameProcessedEvent)
                                    if input.UserInputType == Enum.UserInputType.MouseButton1 and not gameProcessedEvent then
                                            if Char then
                                                local Football = Char:FindFirstChildOfClass("Tool")
                                                if Football then
                                                    if state == true then
														if state == false then return end
                                                        local start = Player.Character:FindFirstChild("Head").Position
														if not isLocked then
															local nearestPlayer = getNearestPlayerToMouse()
															if nearestPlayer and nearestPlayer:IsA("Player") then
																ClosestPlr = nearestPlayer
															end
														end
														
														if isLocked and not ClosestPlr then
															if getNearestPlayerToMouse() == nil then
																ClosestPlr = ClosestPlr
															else
																ClosestPlr = getNearestPlayerToMouse()
															end
														end
                                                        local Initial = 95
                                                        local Throwtype = getThrowType()


														local WhichOne2;
														if Throwtype == "Fade" then
															WhichOne2 = Data.FadeModeAngle
														elseif Throwtype == "Bullet" then
															WhichOne2 = Data.BulletModeAngle
														else
															WhichOne2 = Data.Angle
														end
														if AutoPowa then
                                                            if Throwtype == "Fade" then
                                                                Initial = 95
                                                            else
                                                                Initial = 95
                                                            end
                                                        else
                                                            Initial = Data.NormalPower
                                                        end
                                                        local toLaunchAnlge;
														if AutoAngie then
                                                            if Throwtype == "Fade" then
                                                                toLaunchAnlge = math.rad(75)
                                                            elseif Throwtype == "Bullet" then
																toLaunchAnlge = clampnum(HighSpeedLowAngleCalcs(FF2Grav, Initial), 0, 0.296706)
															else
                                                                toLaunchAnlge = clampnum(calculateLaunchAngle(FF2Grav, Initial), 0, 0.975)
																
                                                            end
														else
															toLaunchAnlge = math.rad(WhichOne2)
														end
                                                        local TOF = GetTimeOfFlightProjectile(Initial, toLaunchAnlge, FF2Grav)
                                                        local YesEnd;
                                                        if string.find(ClosestPlr.name, "bot 1") or string.find(ClosestPlr.name, "bot 3") then
                                                            YesEnd = BotEstimatedVel(TOF, ClosestPlr)
                                                        elseif not string.find(ClosestPlr.name, "bot 1") or not string.find(ClosestPlr.name, "bot 3") then
                                                            YesEnd = GetTargetPositionForWR(TOF, ClosestPlr)
                                                        end
														local PowerSir;
                                                        local vel, toThrowToDirection, pow = OverallVelocityNeededToReachAPosition(toLaunchAnlge, start, YesEnd, Vector3.new(0,-FF2Grav,0), TOF)  
														if AutoPowa then
                                                            if Throwtype == "Fade" then
                                                                PowerSir = 95
                                                            elseif Throwtype == "Bullet" then
																PowerSir = clampnum(pow, 90, 95)
															else
                                                                PowerSir = pow
                                                            end
														else
															PowerSir = Data.NormalPower
														end
                                                        local neworigin = start + (ThrowingTab.Direction * 5)
														local throwingpar = Instance.new("Part")
														throwingpar.Size = Vector3.new(2, 2, 2)
														throwingpar.Color = Color3.fromRGB(255, 165, 0)
														
                                                        local RemoteEvent = Football.Handle:FindFirstChild("RemoteEvent")
                                                        if RemoteEvent then
                                                            local ThrowAnimation = Char.Humanoid:LoadAnimation(game:GetService("ReplicatedStorage").Animations.Throw)
                                                            ThrowAnimation.Name = "Throw"
                                                            ThrowAnimation:Play()
                                                            RemoteEvent:fireServer("Clicked", start, neworigin + ThrowingTab.Direction * 10000, (game.PlaceId == 8206123457 and PowerSir) or 95, PowerSir)
															throwingpar.Parent = workspace
															throwingpar.Velocity = vel
															wait(TOF)
															throwingpar:Destroy()
															
                                                        else
                                                            warn("RemoteEvent not found on Football's Handle")
                                                        end 
                                                    else
                                                        print("Toggle not on")
                                                    end
                                                else
                                                    print("No Tool found in character.")
                                                end
                                            else
                                                print("Character not found.")
                                            end
                                        end
                                	end)


									
                                local TargetPosition;
								local PredictedRoute
								
								--// Connection to make it Click to Throw //--
								Char.ChildAdded:Connect(function(v)
									if v.Name == "Football" and Char then
										local children = v:GetChildren()
										if children.Name == "Handle" then
											local descendants = children:GetChildren()
											if descendants.Name == "LocalScript" then
												descendants:Destroy()
											end
										end
									end
								end)
								
                                --// One big function that holds function for if conditions //--
                                task.spawn(function()
									game:GetService('RunService').Heartbeat:Connect(function()
										task.wait()
										
										if not isLocked then
											ClosestPlr = getNearestPlayerToMouse()
										end
										
										
										local PredictedRoute;

										
										task.wait()
										
										if state and Player.Character and Player.Character:FindFirstChild("Football") and ClosestPlr then
											trace.Visible = true
											local Throwtype = getThrowType()
											
											Highlight.Enabled = true
											Highlight.OutlineTransparency = 0
											Highlight.FillColor = Color3.new(0.5098, 0.5098, 0.7059)
											Highlight.OutlineColor = Color3.new(0, 0, 0)
											if not string.find(ClosestPlr.Name, "bot 1") and not string.find(ClosestPlr.Name, "bot 3") then
												PredictedRoute = CalculateRouteofPlayer(ClosestPlr)
											elseif string.find(ClosestPlr.Name, "bot 1") or  string.find(ClosestPlr.Name, "bot 3") then
												PredictedRoute = "Straight"
											end
	
	
											if not string.find(ClosestPlr.Name, "bot 1") and not string.find(ClosestPlr.Name, "bot 3") then
												if ClosestPlr.Character:FindFirstChild("HumanoidRootPart") then
													Highlight.Parent = ClosestPlr.Character
													
												end
											elseif string.find(ClosestPlr.Name, "bot 1") or string.find(ClosestPlr.Name, "bot 3") then
												Highlight.Parent = ClosestPlr	
												
											end
											ScreenGui.Enabled = true
											
											local WhichOne;
											if Throwtype == "Fade" then
												WhichOne = Data.FadeModeAngle
											elseif Throwtype == "Bullet" then
												WhichOne = Data.BulletModeAngle
											else
												WhichOne = Data.Angle
											end


											local FF2Grav = 28
											local Start = Player.Character:FindFirstChild("Head").Position
											local Initial;
											local LaunchAngle;
											
											if AutoPowa then
												Initial = 95
											else
												Initial = Data.NormalPower
											end

											
											if AutoAngie then
												if Throwtype == "Fade" then
													LaunchAngle = math.rad(75)
												elseif Throwtype == "Bullet" then
													LaunchAngle = clampnum(HighSpeedLowAngleCalcs(FF2Grav, Initial), 0, 0.296706)
												else
													LaunchAngle = clampnum(calculateLaunchAngle(FF2Grav, Initial), 0, 0.975)
												end
											else
												LaunchAngle = math.rad(WhichOne)
											end
											
											local TOF = GetTimeOfFlightProjectile(Initial, LaunchAngle, FF2Grav)
											local TargetPosition;
											
											if (string.find(ClosestPlr.Name, "bot 1") or string.find(ClosestPlr.Name, "bot 3")) then
												TargetPosition = BotEstimatedVel(TOF, ClosestPlr)
											else
												TargetPosition = GetTargetPositionForWR(TOF, ClosestPlr)
											end
											
											local POWAA;
											
											
											 local velocity, direction, power = OverallVelocityNeededToReachAPosition(LaunchAngle, Start, TargetPosition, Vector3.new(0, -FF2Grav, 0), TOF)
												Initial = power									
											if AutoPowa then
												if Throwtype == "Fade" then
													POWAA = 95
												elseif Throwtype == "Bullet" then
													POWAA = clampnum(power, 90, 95)
												else
													POWAA = power
												end
											else
												POWAA = Data.NormalPower
											end         
											if isVector3Valid(direction) and isVector3Valid(TargetPosition) then
												ThrowingTab.Direction = direction
												
												local startAdjusted = Start + (ThrowingTab.Direction * 5)
												
												
												
												local curve0, curve1, cf0, cf1 = beamProjectile(Vector3.new(0, -FF2Grav, 0), POWAA * direction, Start + (direction * 5), TOF)
												
												beam.CurveSize0 = curve0
												beam.CurveSize1 = curve1
												beam.Attachment0.CFrame = beam.Attachment0.Parent.CFrame:inverse() * cf0
												beam.Attachment1.CFrame = beam.Attachment1.Parent.CFrame:inverse() * cf1
												beam.Width0 = 0.5
												beam.Width1 = 0.5
												
												---// get beam rotation //--
												local sum = (beam.Attachment1.CFrame - beam.Attachment1.Position):Inverse()
												VisPart.CFrame = beam.Attachment1.CFrame * sum * CFrame.Angles(math.rad(0), 0, 0)
												--trace.From = game:GetService("UserInputService"):GetMouseLocation()--
												local CamPo, OnScren = isVisandPos(VisPart.Position)
												local CamPo2, OnS = isVisandPos(beam.Attachment0.Position)
												if OnScren and OnS then
													trace.From = Vector2.new(CamPo2.X, CamPo2.Y)
													trace.To = Vector2.new(CamPo.X, CamPo.Y)
												end
												Playerrr.Text = ClosestPlr.Name
												PowerNumber.Text = tostring(POWAA)
												
												if PredictedRoute then
													RouteOK.Text = PredictedRoute
												end
												
												if not (string.find(ClosestPlr.Name, "bot 1") or string.find(ClosestPlr.Name, "bot 3")) then
													local ClosestCB = getPeopleGuardingClosestToMouse(ClosestPlr)
													if Interceptable(ClosestCB, VisPart.Position, TOF) then
														Intable.Text = "Yes"
													else
														Intable.Text = "No"
													end
												elseif string.find(ClosestPlr.Name, "bot 1") or string.find(ClosestPlr.Name, "bot 3") then
													local BotCbClosest = getClosestCBtoBot(ClosestPlr)
													if botInterceptable(BotCbClosest, VisPart.Position, TOF) then
														Intable.Text = "Yes"
													else
														Intable.Text = "No"
													end
												end


												if not (string.find(ClosestPlr.Name, "bot 1") or string.find(ClosestPlr.Name, "bot 3")) then
													local ClosestWRR = getNearestPlayerToMouse()
													if CatchAble(ClosestWRR, VisPart.Position, TOF) then
														Intable_2.Text = "Yes"
													else
														Intable_2.Text = "No"
													end
												elseif string.find(ClosestPlr.Name, "bot 1") or string.find(ClosestPlr.Name, "bot 3") then
													local BotCbWr = getNearestPlayerToMouse()
													if botCatchAble(BotCbWr, VisPart.Position, TOF) then
														Intable_2.Text = "Yes"
													else
														Intable_2.Text = "No"
													end
												end
											
											
												
												AirTimeTEXT.Text = tostring(RoundNumToHundredths(TOF)).."s"
												
												if AutoAngie then
													if Throwtype == "Fade" then
														AngleNumber.Text = "75"
													else
														AngleNumber.Text = tostring(RoundNumToHundredths(math.deg(LaunchAngle)))
													end
												else
													AngleNumber.Text = tostring(WhichOne)
												end
											end
										else
											ScreenGui.Enabled = false
											Highlight.Enabled = false
											trace.Visible = false
										end
									end)
								end)
								
								task.spawn(function()
									while state == false do
										task.wait()
										ScreenGui.Enabled = false
										beam.Width0 = 0
										beam.Width1 = 0
                                    end
                                end)  

                          

                                    
                            if ScreenGui then
                                ScreenGui.Enabled = false
                                
                        end






OrionLib:Init()




    


    




